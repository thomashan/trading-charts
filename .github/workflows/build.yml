name: Build
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Build
        timeout-minutes: 30
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build --scan
      - name: Bytewatcher
        timeout-minutes: 30
        uses: gradle/gradle-build-action@v2
        with:
          arguments: bytewatcher --scan
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: failure()
        with:
          report_paths: "**/build/test-results/**/TEST-*.xml"
      - name: Coverall
        uses: gradle/gradle-build-action@v2
        with:
          arguments: jacocoTestReport coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}  # Needed to get PR information, if any
      - name: Sonarqube
        uses: gradle/gradle-build-action@v2
        with:
          arguments: -Dorg.gradle.parallel=false sonar --info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
