plugins {
    id "java"
    id "groovy"
    id "application"
    id "idea"
    id "eclipse"

    // FIXME: org.openjfx.javafxplugin currently doesn"t work with gradle 6.6+
    id "org.openjfx.javafxplugin" version "0.0.10"

    id "jacoco"
    id "org.sonarqube" version "3.3"
    id "com.github.kt3k.coveralls" version "2.12.0"
    id "me.champeau.jmh" version "0.6.5"
}

group "thomashan.github.io"
version "0.0.1"

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11


repositories {
    mavenCentral()
}

ext {
    groovyVersion = "3.0.9"
    junitVersion = "5.7.2"
    jmhVersion = "1.32"
    chronicleQueueVersion = "5.20.123"
}

dependencies {
    implementation("org.codehaus.groovy:groovy-all:${groovyVersion}") {
        exclude group: "junit", module: "junit"
    }
    // csv implementations
    implementation "com.univocity:univocity-parsers:2.9.1"
    implementation("net.openhft:chronicle-queue:${chronicleQueueVersion}") {
        exclude group: "net.openhft", module: "chronicle-analytics"
    }

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "com.dropbox.core:dropbox-core-sdk:4.0.0"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    jmh "org.openjdk.jmh:jmh-core:${jmhVersion}"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"
}

javafx {
    version = "15"
    modules = ["javafx.controls"]
}

application {
    mainModule = "io.github.thomashan.tradingchart"
    mainClass = "io.github.thomashan.tradingchart.CandleStickChartApp"
}

sonarqube {
    properties {
        property "sonar.projectKey", "thomashan_trading-charts"
        property "sonar.organization", "thomashan-github"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

sourceSets {
    bytewatcher {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        java { srcDirs = ["src/bytewatcher/java"] }
        groovy { srcDirs = ["src/bytewatcher/groovy"] }
    }
}

configurations {
    bytewatcherImplementation.extendsFrom testImplementation
    bytewatcherRuntimeOnly.extendsFrom testRuntimeOnly
    bytewatcherRuntimeClasspath.extendsFrom testRuntimeClasspath
    bytewatcherCompileClasspath.extendsFrom testCompileClasspath
    bytewatcherCompileOnly.extendsFrom testCompileOnly
}

task bytewatcher(type: Test) {
    testClassesDirs = sourceSets.bytewatcher.output.classesDirs
    classpath = sourceSets.bytewatcher.runtimeClasspath
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

jmh {
    version = jmhVersion
//    includes = []
//    excludes = []
}

//gradleEnterprise {
//    buildScan {
//        termsOfServiceUrl = "https://gradle.com/terms-of-service"
//        termsOfServiceAgree = "yes"
//    }
//}
