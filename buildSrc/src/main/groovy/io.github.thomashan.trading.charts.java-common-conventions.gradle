/*
 * This file was generated by the Gradle "init" task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java Plugin to add support for Java.
    id "java"
    id "groovy"
    id "org.sonarqube"
    id "jacoco"
    id "com.github.kt3k.coveralls"
//    id "checkstyle"
//    id "pmd"
//    id "com.github.spotbugs"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

ext {
    groovyVersion = "4.0.4"
    junitVersion = "5.8.2"
    jmhVersion = "1.35"
    chronicleQueueVersion = "5.22.18"
    univocityVersion = "2.9.1"
}

// start: configure bytewatcher
sourceSets {
    bytewatcher {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        java { srcDirs = ["src/bytewatcher/java"] }
        groovy { srcDirs = ["src/bytewatcher/groovy"] }
    }
}

configurations {
    bytewatcherApi.extendsFrom testApi
    bytewatcherImplementation.extendsFrom testImplementation
    bytewatcherRuntimeOnly.extendsFrom testRuntimeOnly
    bytewatcherRuntimeClasspath.extendsFrom testRuntimeClasspath
    bytewatcherCompileClasspath.extendsFrom testCompileClasspath
    bytewatcherCompileOnly.extendsFrom testCompileOnly
}

task bytewatcher(type: Test) {
    testClassesDirs = sourceSets.bytewatcher.output.classesDirs
    classpath = sourceSets.bytewatcher.runtimeClasspath
}
// end: configure bytewatcher

dependencies {
    testImplementation("org.apache.groovy:groovy:${groovyVersion}") {
        exclude group: "junit", module: "junit"
    }
    bytewatcherImplementation project(path: ":bytewatcher")
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter(junitVersion)
        }
    }
}

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }

    doFirst {
        // FIXME: find a way to get rid of these jvmArgs
        jvmArgs = [
            "--add-exports", "java.base/jdk.internal.ref=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang.reflect=ALL-UNNAMED",
            "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED"
        ]
    }

    minHeapSize("2G")
    maxHeapSize("2G")
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:all"]
}

if (System.getenv("CI")) {
    if (project.hasProperty("buildScan")) {
        buildScan {
            termsOfServiceUrl = "https://gradle.com/terms-of-service"
            termsOfServiceAgree = "yes"
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "thomashan_trading-charts"
        property "sonar.organization", "thomashan-github"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true // coveralls plugin depends on xml format report
        html.required = true
    }
}
